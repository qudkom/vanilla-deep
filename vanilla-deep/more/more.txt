🧰 실전 유틸 & 활용법

Functional Programming 패턴 (트렌드)
map, filter, reduce, compose, pipe, curry, partial
Lodash/fp, Ramda 등과 연계 가능
=> 함수형 사고에 필수
=> 📌 함수형 프로그래밍(FP) 패러다임의 핵심 도구들이고, Lodash/fp, Ramda 같은 라이브러리에서도 자주 써.


Immutable & Persistent 구조 (트렌드)
객체/배열의 얕은/깊은 복사, 구조 공유(Structural Sharing)
=> 상태 관리에 핵심
=> Object.freeze()나 Object.seal()은 얕은 불변성만 제공함. 중첩 객체는 그대로 변경 가능.
=> Reflect.defineProperty는 접근 제어엔 좋지만, 불변성 보장에는 부적절해.
=> Persistent 구조는 구조 공유(Structural Sharing)를 통해 변경 없이 새로운 버전 생성. 예: Immer, Immutable.js, Mori.
➡️ 상태 관리를 다룰 땐 중요한 개념 (특히 Redux, Recoil, Zustand 등과 함께).

타입 시스템 이해 (트렌드)
JS 자체로는 한계 있지만, TS 도입 없이도 JSDoc과 typeof, instanceof, constructor 같은 타입 판별 기법 익히기


Intl API (트렌드)
날짜, 숫자, 통화 포맷팅. 프론트엔드 로컬라이징에서 필수


===================
🧠 메타프로그래밍 연계 학습
Object.defineProperty vs Reflect.defineProperty (레거시 + 트렌드)
property descriptor 제어

Revocable Proxy (트렌드)
프록시를 추후에 사용할 수 없도록 "끊는" 기능


일반 Proxy랑 비슷하지만, 중간에 무효(revoke) 처리 가능한 Proxy를 만들 수 있음.

보안상 민감한 객체를 외부에 노출했다가, 이후 접근 권한을 끊고 싶을 때
예: 세션 만료 후 접근 제한, 플러그인 sandbox 등


===================
🧵 보너스: 동시성 & 비동기 흐름
웹 워커 / SharedWorker (레거시 + 트렌드 일부 활용)
멀티스레드 유사 구조 만들기

AbortController & fetch 취소 (트렌드)
최신 브라우저에서 사용됨. API 요청 취소 기능

StructuredClone (트렌드)
JSON.parse/stringify의 한계를 넘는 깊은 복사 API


===================
✨ 실전에서 자주 맞닥뜨릴 상황
Serialization/Deserialization (레거시 + 트렌드)
JSON.stringify, JSON.parse의 한계와 replacer/reviver


🔹 JSON replacer / reviver
JSON.stringify와 JSON.parse에 콜백 함수 넣어서 직렬화/역직렬화 커스터마이징 가능함.

📌 replacer → stringify 시 키/값 필터링 또는 가공
📌 reviver → parse 시 값 복원 또는 변환



동적 코드 생성 및 실행 (레거시지만 중요)
new Function, eval 사용 시의 보안/성능 이슈

===================
🔹 WeakMap, WeakSet (레거시 개념 아님, 여전히 중요)
주요 목적: 가비지 컬렉션에 영향을 주지 않고 객체를 키로 사용해 메모리 누수 없이 안전하게 부가 데이터를 저장.

자주 사용하는 건 아니지만, 라이브러리 구현이나 내부 상태 저장에 매우 유용함 (예: 캡슐화, private 상태 관리).

➡️ 사용 빈도는 낮아도 언어 깊이 있게 이해하려면 필수로 알아두는 게 좋아.